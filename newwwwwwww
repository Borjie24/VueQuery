from datetime import datetime
import pandas as pd
from sqlalchemy import create_engine, func, extract, cast, Date
from sqlalchemy.orm import sessionmaker
from sqlalchemy.sql import select

def get_energy_consumption(engine, period, consumption_type_id, ElectricityData):
    if period not in ["hourly", "daily", "monthly", "yearly"]:
        raise ValueError("Invalid period. Choose from 'hourly', 'daily', 'monthly', or 'yearly'.")
    if consumption_type_id not in [1, 2, 3, 4]:
        raise ValueError("Invalid consumption type ID. Choose from 1, 2, 3, or 4.")
    
    Session = sessionmaker(bind=engine)
    session = Session()
    
    query = session.query(
        func.date_trunc(period, ElectricityData.extracted_datetime).label("period"),
        ElectricityData.data_name,
        func.sum(ElectricityData.value).label("total_value")
    ).filter(
        ElectricityData.consumption_type_id == consumption_type_id,
        ElectricityData.extracted_datetime >= session.query(
            func.min(func.date_trunc('year', ElectricityData.extracted_datetime))
        ).scalar() if period == 'yearly' else None
    ).group_by("period", ElectricityData.data_name)
    
    result = query.all()
    session.close()
    
    df = pd.DataFrame(result, columns=["period", "data_name", "total_value"])
    return dfa
