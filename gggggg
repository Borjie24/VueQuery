function getDynamicRange(values) {
    if (!values.length) return [0, 10]; // Default range if no data
    
    const minVal = Math.min(...values);
    const maxVal = Math.max(...values);
    const padding = (maxVal - minVal) * 0.1; // 10% padding
    
    return [minVal - padding, maxVal + padding];
}

const planValues = [50, 75, 100, 120, 150]; // Replace with actual data
const actualValues = [40, 80, 110, 130, 160]; // Replace with actual data

const yAxisRange = getDynamicRange(planValues);
const yAxis2Range = getDynamicRange(actualValues);

const trace1 = {
    x: ['Jan', 'Feb', 'Mar', 'Apr', 'May'],
    y: planValues,
    name: 'Plan',
    type: 'scatter',
    yaxis: 'y1'
};

const trace2 = {
    x: ['Jan', 'Feb', 'Mar', 'Apr', 'May'],
    y: actualValues,
    name: 'Actual',
    type: 'scatter',
    yaxis: 'y2'
};

const layout = {
    title: 'Dynamic Y-Axis Range',
    yaxis: { title: 'Plan Values', range: yAxisRange },
    yaxis2: { title: 'Actual Values', range: yAxis2Range, overlaying: 'y', side: 'right' },
    xaxis: { title: 'Month' }
};

Plotly.newPlot('plot', [trace1, trace2], layout);

-----
import plotly.graph_objects as go

def get_dynamic_range(values):
    if not values:
        return [0, 10]  # Default range if no data
    
    min_val = min(values)
    max_val = max(values)
    padding = (max_val - min_val) * 0.1  # 10% padding
    
    return [min_val - padding, max_val + padding]

plan_values = [50, 75, 100, 120, 150]  # Replace with actual data
actual_values = [40, 80, 110, 130, 160]  # Replace with actual data

y_axis_range = get_dynamic_range(plan_values)
y_axis2_range = get_dynamic_range(actual_values)

fig = go.Figure()

fig.add_trace(go.Scatter(x=['Jan', 'Feb', 'Mar', 'Apr', 'May'], y=plan_values, name='Plan', yaxis='y1'))
fig.add_trace(go.Scatter(x=['Jan', 'Feb', 'Mar', 'Apr', 'May'], y=actual_values, name='Actual', yaxis='y2'))

fig.update_layout(
    title='Dynamic Y-Axis Range',
    xaxis=dict(title='Month'),
    yaxis=dict(title='Plan Values', range=y_axis_range),
    yaxis2=dict(title='Actual Values', range=y_axis2_range, overlaying='y', side='right')
)

fig.show()


------
deff get_dynamic_range_with_zero_min(values):
    if not values:
        return [0, 10]  # Default range if no data
    
    max_val = max(values)
    padding = max_val * 0.1  # 10% padding
    
    return [0, max_val + padding]

# Compute dynamic ranges with min as 0
y_axis_range_zero_min = get_dynamic_range_with_zero_min(plan_values)
y_axis2_range_zero_min = get_dynamic_range_with_zero_min(actual_values)

y_axis_range_zero_min, y_axis2_range_zero_min

