from datetime import datetime
import pandas as pd
from sqlalchemy import create_engine, func, extract, cast, Date
from sqlalchemy.orm import sessionmaker

class EnergyConsumptionAggregator:
    def __init__(self, engine, ElectricityData):
        self.engine = engine
        self.ElectricityData = ElectricityData
        self.session = sessionmaker(bind=self.engine)()

    def fetch_data(self, consumption_type_id, period):
        if period not in ["hourly", "daily", "monthly", "yearly"]:
            raise ValueError("Invalid period. Choose from 'hourly', 'daily', 'monthly', or 'yearly'.")
        if consumption_type_id not in [1, 2, 3, 4]:
            raise ValueError("Invalid consumption type ID. Choose from 1, 2, 3, or 4.")

        today = datetime.now().date()
        query = self.session.query(
            self.ElectricityData.extracted_datetime,
            self.ElectricityData.data_name,
            self.ElectricityData.value
        ).filter(self.ElectricityData.consumption_type_id == consumption_type_id)

        if period == "hourly":
            query = query.filter(cast(self.ElectricityData.extracted_datetime, Date) == today)

        raw_data = query.all()
        return pd.DataFrame(raw_data, columns=["extracted_datetime", "data_name", "value"])

    def aggregate_data(self, df, period):
        df["extracted_datetime"] = pd.to_datetime(df["extracted_datetime"])

        if period == "hourly":
            df["period"] = df["extracted_datetime"].dt.floor("H")
        elif period == "daily":
            df["period"] = df["extracted_datetime"].dt.date
        elif period == "monthly":
            df["period"] = df["extracted_datetime"].dt.to_period("M")
        elif period == "yearly":
            df["period"] = df["extracted_datetime"].dt.to_period("M")
            df["period"] = df["period"].apply(lambda x: f"FY{x.year % 100}" if x.month >= 4 else f"FY{(x.year - 1) % 100}")

        df = df.groupby(["period", "data_name"], as_index=False).sum()
        return df

    def fill_missing_periods(self, df, period):
        today = datetime.now().date()

        if period == "hourly":
            hours = pd.date_range(start=today, periods=24, freq='H')
            df_full = pd.DataFrame({"period": hours})
        elif period == "daily":
            days = pd.date_range(start=today.replace(day=1), periods=today.day, freq='D')
            df_full = pd.DataFrame({"period": days.date})
        elif period == "monthly":
            fiscal_year_start = today.year if today.month >= 4 else today.year - 1
            months = pd.date_range(start=f"{fiscal_year_start}-04-01", periods=12, freq='M').to_period("M")
            df_full = pd.DataFrame({"period": months})
        else:
            return df  # No missing periods for yearly

        df = df_full.merge(df, on="period", how="left").fillna(0)
        return df

    def get_energy_consumption(self, consumption_type_id, period):
        df = self.fetch_data(consumption_type_id, period)
        df = self.aggregate_data(df, period)
        df = self.fill_missing_periods(df, period)

        df = df.pivot(index="period", columns="data_name", values="value").reset_index()
        df = df.rename(columns={"plan": "plan_value", "actual": "actual_value"}).fillna(0)

        return df

    def close_session(self):
        self.session.close()
----------
import pytest
import pandas as pd
from datetime import datetime, timedelta
from unittest.mock import MagicMock
from sqlalchemy.orm import sessionmaker
from your_module import EnergyConsumptionAggregator  # Replace 'your_module' with actual module name

@pytest.fixture
def mock_engine():
    return MagicMock()

@pytest.fixture
def mock_ElectricityData():
    class MockElectricityData:
        extracted_datetime = None
        data_name = None
        value = None
        consumption_type_id = None
    return MockElectricityData

@pytest.fixture
def aggregator(mock_engine, mock_ElectricityData):
    return EnergyConsumptionAggregator(mock_engine, mock_ElectricityData)

@pytest.fixture
def mock_data():
    return [
        (datetime(2025, 3, 6, 0, 15), "actual", 10),
        (datetime(2025, 3, 6, 0, 45), "actual", 15),
        (datetime(2025, 3, 6, 1, 10), "actual", 20),
        (datetime(2025, 3, 6, 2, 30), "actual", 25),
        (datetime(2025, 3, 6, 3, 0), "actual", 30),
        (datetime(2025, 3, 6, 4, 50), "plan", 40),
    ]

def test_fetch_data(mocker, aggregator, mock_data):
    session_mock = MagicMock()
    aggregator.session = session_mock
    query_mock = session_mock.query.return_value
    query_mock.filter.return_value.all.return_value = mock_data

    df = aggregator.fetch_data(1, "hourly")
    
    assert not df.empty
    assert list(df.columns) == ["extracted_datetime", "data_name", "value"]
    assert len(df) == len(mock_data)

def test_aggregate_data(aggregator, mock_data):
    df = pd.DataFrame(mock_data, columns=["extracted_datetime", "data_name", "value"])
    df_aggregated = aggregator.aggregate_data(df, "hourly")

    assert "period" in df_aggregated.columns
    assert df_aggregated["period"].dtype == "datetime64[ns]"

def test_fill_missing_periods(aggregator):
    today = datetime.now().date()
    df = pd.DataFrame({
        "period": [today],
        "actual": [100]
    })
    df_filled = aggregator.fill_missing_periods(df, "hourly")

    assert len(df_filled) == 24  # Ensure all hours exist

def test_get_energy_consumption(mocker, aggregator, mock_data):
    mocker.patch.object(aggregator, "fetch_data", return_value=pd.DataFrame(mock_data, columns=["extracted_datetime", "data_name", "value"]))
    mocker.patch.object(aggregator, "aggregate_data", return_value=pd.DataFrame({
        "period": [datetime(2025, 3, 6, 0)],
        "data_name": ["actual"],
        "value": [25]
    }))
    mocker.patch.object(aggregator, "fill_missing_periods", return_value=pd.DataFrame({
        "period": [datetime(2025, 3, 6, 0)],
        "actual": [25],
        "plan": [0]
    }))

    df_result = aggregator.get_energy_consumption(1, "hourly")
    
    assert "actual_value" in df_result.columns
    assert "plan_value" in df_result.columns
    assert df_result["actual_value"].sum() == 25
